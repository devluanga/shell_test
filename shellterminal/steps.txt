#PARSING DATA
1.  create variables to hold input string without delimters
        say char *inputptr;
2.  create a variable to hold the delimters
        const char *delim = '\n'
3.  dynamically allocate memory to inputptr
        inputptr = malloc(sizeof(char)*input_count);
        if (inputptr == NULL)
        {
            perror("memory allocation failed!!\n");
            exit(EXIT_FAILURE);
        }
4.  make a copy of input string to store in inputptr
        strcpy(inputptr, source);
5.  split the string stored in inputptr into an array hence:
            a. calc the total number of tokens expected.
                token = strtok(source, delimeters);
                while(token != NULL)
                {
                    tokenvalue++;
                    toek = strtok(NULL, delimeters);
                }
                tokenvalue++
            b. using the number of tokens from above allocate the required memory
               to hold array of all the string as the 
               argv = malloc(sizeof(char *)* tokenvalue);
            c. store the tokens properly in the array.
            token = strtok(inputptr, delimeters);
                for (int x = 0; x != NULL; x++ )
                {
                    argv[x] = malloc(sizeof(char)* strlen(tokenvalue));
                    strcpy(argv[x], token);

                    token = strtok(NULL, delimeters);
                }
                argv[x] = NULL;


##Implementing the execve functionality of the imput
        -->built-in commands
        -->Binary executable 
        -->Aliases
Now that we have been able to create a problem get the user input and even store it in an array,
we need to use the execute commands ti make sure that thesecommands are properly executed as per user needs.

In this project we are restricted to using execve command only and we'll begin by looking at its man page 
        man 3 execve

image.png

SYNOPSIS
       #include <unistd.h>

       int execve(const char *pathname, char *const argv[],
                  char *const envp[]);

from the above the execve command will need some arguements to be passed
        pathname
        argv[]
        envvp -->environment arguements
    >>environment variables
        these are all the commands created and maintained at the OS level.
        inside these variables we have path variables that make it possible for execve to execute commands given to it.
